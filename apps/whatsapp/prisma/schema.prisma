generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bot_credentials {
  id                String    @id @db.Uuid
  bot_id            String    @db.Uuid
  clientSecret      String    @unique(map: "bot_credentials_clientsecret_unique")
  twilioPhoneNumber String    @unique(map: "bot_credentials_twiliophonenumber_unique") @db.VarChar(255)
  twilioSID         String    @unique(map: "bot_credentials_twiliosid_unique")
  twilioTK          String    @unique(map: "bot_credentials_twiliotk_unique")
  gCredsCloud       String?   @unique(map: "bot_credentials_gcredscloud_unique") @db.VarChar(255)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  bots              bots      @relation(fields: [bot_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bot_credentials_bot_id_foreign")

  @@index([bot_id], map: "bot_credentials_bot_id_index")
}

model bots {
  id              String            @id @db.Uuid
  tenant_id       String            @db.Uuid
  user_id         String            @db.Uuid
  name            String            @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  deleted_at      DateTime?         @db.Timestamp(0)
  bot_credentials bot_credentials[]
  tenants         tenants           @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bots_tenant_id_foreign")
  users           users             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bots_user_id_foreign")

  @@index([tenant_id], map: "bots_tenant_id_index")
  @@index([user_id], map: "bots_user_id_index")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model cities {
  id          String      @id @db.Uuid
  province_id String?     @db.Uuid
  name        String?     @db.VarChar(255)
  country     String?     @db.VarChar(255)
  latitude    Float?
  longitude   Float?
  created_at  DateTime?   @db.Timestamp(0)
  updated_at  DateTime?   @db.Timestamp(0)
  provincies  provincies? @relation(fields: [province_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cities_province_id_foreign")

  @@index([province_id], map: "cities_province_id_index")
}

model countries {
  id         String       @id @db.Uuid
  name       String       @db.VarChar(255)
  short_code String       @db.VarChar(255)
  created_at DateTime?    @db.Timestamp(0)
  updated_at DateTime?    @db.Timestamp(0)
  provincies provincies[]
  tenants    tenants[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String
  options        String?
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int    @db.SmallInt
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model permissions {
  id              String            @id @db.Uuid
  name            String            @unique(map: "permissions_name_unique") @db.VarChar(255)
  description     String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  deleted_at      DateTime?         @db.Timestamp(0)
  role_permission role_permission[] @ignore
}

model provincies {
  id         String     @id @db.Uuid
  country_id String?    @db.Uuid
  code       String?    @db.Char(2)
  name       String?    @db.VarChar(255)
  created_at DateTime?  @db.Timestamp(0)
  updated_at DateTime?  @db.Timestamp(0)
  cities     cities[]
  countries  countries? @relation(fields: [country_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "provincies_country_id_foreign")

  @@index([country_id], map: "provincies_country_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model role_permission {
  role_id       String      @db.Uuid
  permission_id String      @db.Uuid
  created_at    DateTime?   @db.Timestamp(0)
  updated_at    DateTime?   @db.Timestamp(0)
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_permission_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_permission_role_id_foreign")

  @@index([permission_id], map: "role_permission_permission_id_index")
  @@ignore
}

model role_user {
  role_id    String    @id @db.Uuid
  user_id    String    @db.Uuid
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  roles      roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_user_role_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_user_user_id_foreign")

  @@index([user_id], map: "role_user_user_id_index")
}

model roles {
  id              String            @id @db.Uuid
  name            String            @unique(map: "roles_name_unique") @db.VarChar(255)
  description     String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  deleted_at      DateTime?         @db.Timestamp(0)
  role_permission role_permission[] @ignore
  role_user       role_user?
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       String? @db.Uuid
  ip_address    String? @db.VarChar(45)
  user_agent    String?
  payload       String
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model telescope_entries {
  sequence                BigInt                   @id @default(autoincrement())
  uuid                    String                   @unique(map: "telescope_entries_uuid_unique") @db.Uuid
  batch_id                String                   @db.Uuid
  family_hash             String?                  @db.VarChar(255)
  should_display_on_index Boolean                  @default(true)
  type                    String                   @db.VarChar(20)
  content                 String
  created_at              DateTime?                @db.Timestamp(0)
  telescope_entries_tags  telescope_entries_tags[]

  @@index([batch_id], map: "telescope_entries_batch_id_index")
  @@index([created_at], map: "telescope_entries_created_at_index")
  @@index([family_hash], map: "telescope_entries_family_hash_index")
  @@index([type, should_display_on_index], map: "telescope_entries_type_should_display_on_index_index")
}

model telescope_entries_tags {
  entry_uuid        String            @db.Uuid
  tag               String            @db.VarChar(255)
  telescope_entries telescope_entries @relation(fields: [entry_uuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "telescope_entries_tags_entry_uuid_foreign")

  @@id([entry_uuid, tag])
  @@index([tag], map: "telescope_entries_tags_tag_index")
}

model telescope_monitoring {
  tag String @id @db.VarChar(255)
}

model tenants {
  id           String     @id @db.Uuid
  country_id   String?    @db.Uuid
  name         String     @db.VarChar(255)
  phone        String     @db.VarChar(255)
  email        String     @db.VarChar(255)
  province     String     @db.VarChar(255)
  city         String     @db.VarChar(255)
  address      String     @db.VarChar(255)
  taxId        String?    @db.VarChar(255)
  contact_name String     @db.VarChar(255)
  created_at   DateTime?  @db.Timestamp(0)
  updated_at   DateTime?  @db.Timestamp(0)
  deleted_at   DateTime?  @db.Timestamp(0)
  bots         bots[]
  countries    countries? @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tenants_country_id_foreign")
  users        users[]

  @@index([country_id], map: "tenants_country_id_index")
}

model users {
  id                String      @id @db.Uuid
  tenant_id         String?     @db.Uuid
  name              String      @db.VarChar(255)
  email             String      @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?   @db.Timestamp(0)
  password          String      @db.VarChar(255)
  remember_token    String?     @db.VarChar(100)
  created_at        DateTime?   @db.Timestamp(0)
  updated_at        DateTime?   @db.Timestamp(0)
  deleted_at        DateTime?   @db.Timestamp(0)
  bots              bots[]
  role_user         role_user[]
  tenants           tenants?    @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_tenant_id_foreign")

  @@index([tenant_id], map: "users_tenant_id_index")
}
